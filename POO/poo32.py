# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, mensagem) -> None:
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool:
        ...
    
class NotificacaoEmail(Notificacao):

    def enviar(self) -> bool:
        print(f'Email: enviando - {self.mensagem}')
        return True

class NotificacaoSMS(Notificacao):

    def enviar(self) -> bool:
        print(f'SMS: enviando - {self.mensagem}')
        return True
    
#n = NotificacaoEmail('Bom dia')
#n.enviar()

def notificar(noticacao: Notificacao):
    notificacao_enviada = noticacao.enviar()
    
    if notificacao_enviada:
        print('Notifica√ßao enviada')
    else:
        print('Notifica√ßao NAO enviada')
        
    
noti_email = NotificacaoEmail('TESTE EMAIL')
notificar(noti_email)

noti_sms = NotificacaoSMS('TESTE EMAIL')
notificar(noti_sms)